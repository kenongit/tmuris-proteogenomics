Filtering and graphs:


Useful bash:

HISTOGRAMS
perl -ne '@a=split;print "$a[12]\n" if (@a[14] == 1 && $a[2] > 90 && $a[3] > 39 && $a[10]<1e-30 && $a[12]>0.50)' blastxAdultFastaAugustusPro.txt.stats | head -10000 | ./phisto.pl -s 0.1

Filtering statified TrinityVsAugustus blastx output
perl -ne '@a=split;print if (@a[14] == 1)' blastxAdultFastaAugustusPro.txt.stats | more
perl -ne '@a=split;print if (@a[14] == 1 && $a[2] > 90)' blastxAdultFastaAugustusPro.txt.stats | more
perl -ne '@a=split;print if (@a[14] == 1 && $a[2] > 90)' blastxAdultFastaAugustusPro.txt.stats | head
perl -ne '@a=split;print if (@a[14] == 1 && $a[2] > 90)' blastxAdultFastaAugustusPro.txt.stats | awk '{print $1}' | more

perl -ne '@a=split;print  if (@a[14] == 1 && $a[2] > 90 && $a[3] > 39 && $a[10]<1e-30 && $a[12]>0.50)' blastxAdultFastaAugustusPro.txt.stats | more
perl -ne '@a=split;print  if (@a[14] == 1 && $a[2] > 90 && $a[3] > 39 && $a[10]<1e-30 && $a[12]>0.50)' blastxAdultFastaAugustusPro.txt.stats | more
perl -ne '@a=split;print  if (@a[14] == 1 && $a[2] > 90 && $a[3] > 39 && $a[10]<1e-30 && $a[12]>0.50)' blastxAdultFastaAugustusPro.txt.stats | more

Grepping statified TrinityVsAugustus blastx output
grep -c "# Quer" blastxAdultFastaAugustusPro.txt
perl -ne '@a=split;print "$a[1]\n" if (@a[14] == 1 && $a[2] > 90 && $a[3] > 39 && $a[10]<1e-30 && $a[12]>0.50)' blastxAdultFastaAugustusPro.txt.stats | sort | uniq | wc -l

Get unique augustus genes from filterStats output:
python filterStats.py /Users/bede/Data/adult/adult.blastx_trinity_augustus.fasta.stats 1e-30 150 90 0.5 | cut -f2 | sort | uniq | wc -l

Output and count unique gene names

Unique AWKing across multiple files
cat eorf.seqs eorf.seqs estscan.seqs | awk '{print $1}' | sort | uniq -c | awk '{print $1}' | sort | uniq -c 

Super useful AWKing:
awk {'print $2'} /Users/bede/Data/adult/adult.blastx_trinity_augustus.fasta.stats | sort | uniq -c | sort -nr

Grab second column and sort numerically by gene order, properly:
awk '{print $2}' /Users/Bede/Data/stichosome/stichosome.augustus_uniques.counts | sort -n -t g -k 2

Parsing MASCOT:
./mascot_dat_parser_fixed.pl -p -q -e 10000000 -m1 -r1 mascot/adu.f291554845.dat > mascot/adu.f291554845.dat.parsed
./mascot_dat_parser_fixed_dcy.pl -p -q -e 10000000 -m1 -r1 mascot/adu.dcy.f291554969.dat > mascot/adu.dcy.f291554969.dat.parsed

Stripping parsed MASCOT for qvality:
awk -F " " '{print $6}' 4845.parsed.txt > 4845.parsed.stripped.txt
awk -F " " '{print $6}' 4969.dcy.parsed.txt > 4969.dcy.parsed.stripped.txt

Run Qvality:
./qvality ../Data/mascot/4845.parsed.stripped.txt ../Data/mascot/4969.dcy.parsed.stripped.txt > ../Data/mascot/qvality.4845.4969_dcy.out.txt

Run DAT parsing/qvality pipeline
/Users/Bede/Scripts/pipelines/datToScoredPSMs.pipe.sh adu f291555392 f291555385 s3

Output sequences of unique PSMs in a given tissue with a local FDR of less than 1%
awk '$4 <= 0.01 {print $1}' adu.*.psm | sort | uniq > adu.filtered.combined.unique.psm
// Gives 1400 sequences (vs 496 in adu.p1)

Make tissue database by concatenating all parsed results for that tissue 

Retrieve Augustus matches for each PSM from a concatenation of a tissue's parsed DATs 
for psmLine in psmInput
	for parsedLine in parsedInput
		if psmLine.strip('\n\t ') in parsedLine:
			# Normalise spacing
			parsedLine.split(' ')


bede.im bak:
[{"desc":"Make AUGUSTUS FASTAs unique","done":true},{"desc":"Generate Trinity proteins","done":true},{"desc":"Write decoy generation script","done":true},{"desc":"Blastx AUGUSTUS predictions against Trinity proteins","done":true},{"desc":"Analyse blastx output","done":true},{"desc":"Automate filtering blastx output","done":true},{"desc":"Graph filtered blastx output ","done":true},{"desc":"Evaluate transcriptome / predicted proteins relationship","done":true},{"desc":"How many unique augustus genes? (Col 2)","done":true},{"desc":"How many trinity transcripts per gene?","done":true},{"desc":"count contigs per gene -> crude proxy of translation","done":true},{"desc":"Venn diagram","done":true},{"desc":"Correct counts of uniques with sort | uniq -c","done":true},{"desc":"Fix buggy gene counting","done":true},{"desc":"Transcriptome heatmap","done":true},{"desc":"Parse MASCOT data","done":false},{"desc":"Analyse with qvality","done":false}]